{"version":3,"sources":["components/PageHeader/index.js","components/SearchForm/index.js","components/Container/index.js","components/TableRow/index.js","components/Sorting/index.js","components/EmployeeTable/index.js","App.js","index.js"],"names":["PageHeader","className","SearchForm","event","text","target","value","this","props","onNewSearchWord","htmlFor","onChange","e","onUserTyped","name","type","placeholder","id","React","Component","Container","fluid","TableRow","d","Date","employee","dob","date","formattedDate","getDate","getMonth","getFullYear","alt","src","picture","thumbnail","first","last","phone","email","compareNames","a","b","nameA","toUpperCase","nameB","compareDob","empA","empB","orderDescent","SortingCategory","ByName","ByDOB","EmployeeTable","category","sortBy","onClick","style","cursor","employees","map","key","App","state","searchWord","isLoaded","getEmployees","axios","get","then","res","setState","data","results","catch","err","console","log","filter","nameContainsString","stringToSearch","toLowerCase","includes","word","sorted","sort","reverse","sortByName","sortByDob","filteredEmployees","cat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40091c7d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction PageHeader() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid text-white\">\n      <div className=\"container\">\n        <h1>Employee Directory</h1>\n        <h4>Click on the arrows to sort the employee list</h4>\n      </div>\n    </div>\n  );\n}\n\nexport default PageHeader;\n","import React from \"react\";\nimport \"./style.css\";\n\nclass SearchForm extends React.Component {\n  onUserTyped(event) {\n    // text that user have entered in the search field\n    const text = event.target.value;\n    // call a function that will set new value for the \"searchWord\" in the parent component.\n    this.props.onNewSearchWord(text);\n  }\n\n  render() {\n    return (\n      <form className=\"search\">\n        <div className=\"form-group\">\n          <label htmlFor=\"employee\">Employee Name:</label>\n          <input\n            onChange={(e) => this.onUserTyped(e)}\n            name=\"searchWord\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Type employee name to search\"\n            id=\"search\"\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React from \"react\";\n\nfunction Container(props) {\n  return (\n    <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\n  );\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction TableRow(props) {\n  const d = new Date(props.employee.dob.date);\n  const formattedDate =\n    d.getDate() + \"-\" + (d.getMonth() + 1) + \"-\" + d.getFullYear();\n\n  return (\n    <tr>\n      <td>\n        <img\n          alt=\"employee\"\n          src={props.employee.picture.thumbnail}\n          className=\"img-fluid\"\n        />\n      </td>\n      <td>\n        {props.employee.name.first}&ensp;\n        {props.employee.name.last}\n      </td>\n      <td>{props.employee.phone}</td>\n      <td>{props.employee.email}</td>\n      <td>{formattedDate}</td>\n    </tr>\n  );\n}\n\nexport default TableRow;\n","function compareNames(a, b) {\n  let nameA = a.name.first.toUpperCase(); //ingore upper and lowercase\n  let nameB = b.name.first.toUpperCase();\n  if (nameA < nameB) {\n    return -1; // name A comes first in resulting array\n  }\n  if (nameA > nameB) {\n    return 1; // name B comes first in resulting array\n  }\n  return 0; //names must be equal positions unchanged\n}\n\nfunction compareDob(a, b) {\n  let empA = new Date(a.dob.date);\n  let empB = new Date(b.dob.date);\n  if (empA < empB) {\n    return -1;\n  }\n  if (empA > empB) {\n    return 1;\n  }\n  return 0;\n}\n\nlet orderDescent = true;\n\nexport function sortByName(employees) {\n  const sorted = employees.sort(compareNames);\n  if (orderDescent) {\n    orderDescent = false;\n    return sorted;\n  } else {\n    orderDescent = true;\n    return sorted.reverse();\n  }\n}\n\nexport function sortByDob(employees) {\n  const sorted = employees.sort(compareDob);\n  if (orderDescent) {\n    orderDescent = false;\n    return sorted;\n  } else {\n    orderDescent = true;\n    return sorted.reverse();\n  }\n}\n\nexport class SortingCategory {\n  static ByName = \"byname\";\n  static ByDOB = \"byDOB\";\n}\n","import React, { Component } from \"react\";\nimport TableRow from \"../TableRow\";\nimport { SortingCategory } from \"../Sorting\";\n\nclass EmployeeTable extends Component {\n  sortBy(category) {\n    this.props.sortBy(category);\n  }\n\n  render() {\n    return (\n      <table className=\"table table-striped \">\n        <thead>\n          <tr>\n            <th>Image</th>\n            <th>\n              Name&ensp;\n              <span\n                onClick={(e) => this.sortBy(SortingCategory.ByName)}\n                style={{ cursor: \"pointer\" }}\n              >\n                <i className=\"fa fa fa-sort\"></i>\n              </span>\n            </th>\n            <th>Phone</th>\n            <th>Email</th>\n            <th>\n              DOB&ensp;\n              <span\n                onClick={(e) => this.sortBy(SortingCategory.ByDOB)}\n                style={{ cursor: \"pointer\" }}\n              >\n                <i className=\"fa fa fa-sort\"></i>{\" \"}\n              </span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.employees.map((employee, id) => (\n            <TableRow key={id} employee={employee} />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default EmployeeTable;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport PageHeader from \"./components/PageHeader\";\nimport SearchForm from \"./components/SearchForm\";\nimport Container from \"./components/Container\";\nimport EmployeeTable from \"./components/EmployeeTable\";\nimport { SortingCategory, sortByName, sortByDob } from \"./components/Sorting\";\n\nclass App extends Component {\n  state = {\n    employees: [],\n    searchWord: \"\",\n    isLoaded: true,\n  };\n  componentDidMount() {\n    this.getEmployees();\n  }\n\n  getEmployees = () => {\n    const url =\n      \"https://randomuser.me/api/?inc=gender,name,email,phone,dob,picture&results=20\";\n    axios\n      .get(url)\n      .then((res) => {\n        this.setState({\n          employees: res.data.results,\n          isLoaded: true,\n        });\n      })\n      .catch((err) => console.log(\"Error in getting employee data\", err));\n  };\n\n  filteredEmployees() {\n    if (this.state.searchWord === \"\") {\n      return this.state.employees;\n    } else {\n      return this.state.employees.filter((employee) =>\n        this.nameContainsString(employee, this.state.searchWord)\n      );\n    }\n  }\n\n  nameContainsString(employee, stringToSearch) {\n    const name = employee.name.first + \" \" + employee.name.last;\n    return name.toLowerCase().includes(stringToSearch.toLowerCase());\n  }\n\n  onNewSearchWord(word) {\n    this.setState({\n      employees: this.state.employees,\n      searchWord: word,\n      isLoaded: this.state.isLoaded,\n    });\n  }\n\n  sortBy(category) {\n    switch (category) {\n      case SortingCategory.ByName:\n        {\n          const sorted = sortByName(this.state.employees);\n          this.setState({\n            employees: sorted,\n            searchWord: this.state.searchWord,\n            isLoaded: this.state.isLoaded,\n          });\n        }\n        break;\n      case SortingCategory.ByDOB:\n        {\n          const sorted = sortByDob(this.state.employees);\n          this.setState({\n            employees: sorted,\n            searchWord: this.state.searchWord,\n            isLoaded: this.state.isLoaded,\n          });\n        }\n        break;\n      default:\n        return;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <PageHeader />\n        <Container>\n          <SearchForm onNewSearchWord={(word) => this.onNewSearchWord(word)} />\n          <EmployeeTable\n            employees={this.filteredEmployees()}\n            sortBy={(cat) => this.sortBy(cat)}\n          />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}